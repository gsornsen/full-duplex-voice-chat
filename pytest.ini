[pytest]
minversion = 8.0
addopts = -v --strict-markers --tb=short --strict-config
testpaths = tests
asyncio_mode = auto
asyncio_default_fixture_loop_scope = module
asyncio_default_test_loop_scope = module

# Test markers for categorization
markers =
    unit: Unit tests (fast, no external dependencies)
    integration: Integration tests (require Docker, Redis, etc.)
    docker: Tests requiring Docker (may skip if unavailable)
    redis: Tests requiring Redis container
    livekit: Tests requiring LiveKit container
    performance: Performance benchmark tests
    slow: Tests that take longer to run (> 5s)
    grpc: Tests that use gRPC (may be unstable in CI, run locally with Docker)
    grpc_unsafe: Tests that may segfault in certain environments (WSL2, etc.)
    requires_grpc: Tests that require a gRPC-safe environment to run

# Logging
log_cli = false
log_cli_level = INFO
log_file = tests/logs/pytest.log
log_file_level = DEBUG

# Warnings
filterwarnings =
    error
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:pkg_resources is deprecated:UserWarning

# Process Isolation for gRPC Tests
# ---------------------------------
# Integration tests that use gRPC may encounter segmentation faults during
# teardown due to grpc-python's background threads accessing garbage-collected
# event loops.
#
# Two approaches are available:
#
# 1. Process isolation (--forked flag):
#    Run integration tests with the --forked flag to isolate each test
#    in a separate process:
#
#      pytest tests/integration/ --forked -v
#
#    Recommended command: just test-integration
#
# 2. Environment-based skipping (automatic):
#    Tests will automatically skip in unsafe environments (WSL2)
#    unless GRPC_TESTS_ENABLED=1 is set.
#
#    To force enable in WSL2:  GRPC_TESTS_ENABLED=1 pytest tests/integration/
#    To force disable:         GRPC_TESTS_ENABLED=0 pytest tests/integration/
#
# See: GRPC_SEGFAULT_WORKAROUND.md for detailed information.
