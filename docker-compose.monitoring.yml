# Monitoring Stack Docker Compose Configuration
# Prometheus + Grafana for observability and metrics visualization
#
# Usage:
#   docker compose -f docker-compose.monitoring.yml up -d
#   Access Grafana: http://localhost:3033 (admin/admin)
#   Access Prometheus: http://localhost:9090
#
# Note: Grafana on port 3033 to avoid conflicts with LiveKit UI (3000) and other services

services:
  # Prometheus metrics collector
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-tts
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - monitoring
      - tts-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M

  # Grafana visualization platform
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-tts
    restart: unless-stopped
    ports:
      - "3033:3000"  # Use 3033 to avoid conflicts
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3033
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M

  # Node Exporter for system metrics (optional - disabled due to WSL2 mount issues)
  # Uncomment if running on native Linux with proper mount propagation
  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: node-exporter-tts
  #   restart: unless-stopped
  #   ports:
  #     - "9100:9100"
  #   command:
  #     - '--path.rootfs=/host'
  #     - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
  #   volumes:
  #     - /:/host:ro,rslave
  #   networks:
  #     - monitoring
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 128M
  #         cpus: '0.25'

networks:
  monitoring:
    driver: bridge
  tts-network:
    external: true
    name: full-duplex-voice-chat_tts-network

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
