name: PR CI

# Comprehensive CI for pull requests to main
# - Runs full test suite (all 649 tests)
# - Collects code coverage with Codecov
# - Enforces quality gates (lint, typecheck, tests must pass)
# - Status is REQUIRED (blocks merge if failing)
# - Uses aggressive caching for faster runs

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: "3.13"
  UV_VERSION: "latest"

jobs:
  lint:
    name: Lint (ruff)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Run ruff
        run: uv run ruff check src/ tests/

  typecheck:
    name: Type Check (mypy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Cache protobuf stubs
        uses: actions/cache@v4
        with:
          path: src/rpc/generated
          key: protobuf-${{ hashFiles('src/rpc/tts.proto') }}

      - name: Generate protobuf stubs
        run: |
          uv run python -m grpc_tools.protoc \
            -I src/rpc \
            --python_out=src/rpc/generated \
            --grpc_python_out=src/rpc/generated \
            --pyi_out=src/rpc/generated \
            src/rpc/tts.proto

      - name: Fix protobuf imports
        run: |
          sed -i 's/^import tts_pb2 as tts__pb2/from . import tts_pb2 as tts__pb2/' src/rpc/generated/tts_pb2_grpc.py

      - name: Run mypy
        run: uv run mypy src/ tests/

  test:
    name: Test (pytest - full suite)
    runs-on: ubuntu-latest
    permissions:
      # Public new comments on PRs and update existing comments created
      # by this job
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@v4

      # Free up disk space before installation
      - name: Free disk space
        run: |
          echo "Before cleanup:"
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          echo "After cleanup:"
          df -h

      - name: Install OS dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libportaudio2

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras

      # Clean pip cache after install to save space
      - name: Clean pip cache
        run: |
          uv cache clean
          echo "After cache clean:"
          df -h

      - name: Cache protobuf stubs
        uses: actions/cache@v4
        with:
          path: src/rpc/generated
          key: protobuf-${{ hashFiles('src/rpc/tts.proto') }}

      - name: Generate protobuf stubs
        run: |
          uv run python -m grpc_tools.protoc \
            -I src/rpc \
            --python_out=src/rpc/generated \
            --grpc_python_out=src/rpc/generated \
            --pyi_out=src/rpc/generated \
            src/rpc/tts.proto

      - name: Fix protobuf imports
        run: |
          sed -i 's/^import tts_pb2 as tts__pb2/from . import tts_pb2 as tts__pb2/' src/rpc/generated/tts_pb2_grpc.py

      - name: Run pytest with coverage (forked for isolation)
        run: |
          uv run pytest tests/ \
            -v \
            -m "not grpc and not infrastructure" \
            --forked \
            --cov=src \
            --cov-report=xml \
            --cov-report=term \
            --cov-report=html \
            --tb=short \
            --junitxml=test-results.xml \
            -o junit_family=legacy
        env:
          GRPC_TESTS_ENABLED: "0"

      # Clean up test artifacts to free space
      - name: Clean test cache
        if: always()
        run: |
          rm -rf .pytest_cache
          rm -rf htmlcov
          echo "After test cleanup:"
          df -h

      - name: Upload coverage to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: pytest
          name: codecov-pr-ci
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./test-results.xml
          flags: pytest
          name: codecov-test-results
          fail_ci_if_error: false
          verbose: true

      - name: Upload test results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-pr-ci
          path: |
            coverage.xml
            test-results.xml
            .coverage
          retention-days: 30

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Verify uv lock
        run: |
          uv lock --check
          uv sync --frozen

      - name: Build success
        run: |
          echo "## âœ… PR CI Build Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All quality gates passed:" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Linting (ruff)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Type checking (mypy)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Full test suite (pytest)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Code coverage (codecov)" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Build verification (uv lock)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**This PR is ready to merge!** ðŸŽ‰" >> $GITHUB_STEP_SUMMARY

  # Security scanning with Bandit
  security:
    name: Security Scan (bandit)
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't block PR if security scan fails
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install bandit
        run: uv tool install bandit[toml]

      - name: Run bandit
        run: |
          uv tool run bandit -r src/ -f json -o bandit-report.json || true
          uv tool run bandit -r src/ -f txt || true

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: bandit-report.json
          retention-days: 30

  # Dependency vulnerability scanning
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    continue-on-error: true  # Don't block PR if dependency check fails
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --all-extras

      - name: Install pip-audit in project environment
        run: uv pip install pip-audit

      - name: Run pip-audit on project dependencies
        run: |
          uv run pip-audit --desc --output pip-audit-report.json --format json || true
          uv run pip-audit --desc || true

      - name: Upload dependency report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: pip-audit-report.json
          retention-days: 30
