#!/bin/bash
# update-ip.sh - Update Caddyfile and .env.local with current host IP
#
# This script automatically detects your host machine's IP address and updates
# the Caddyfile and web client .env.local with the correct configuration.
#
# Usage:
#   ./scripts/update-ip.sh
#   ./scripts/update-ip.sh --ip 192.168.1.100  # Override IP detection

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get project root (script is in scripts/ subdirectory)
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CADDYFILE="$PROJECT_ROOT/Caddyfile"
ENV_LOCAL="$PROJECT_ROOT/src/client/web/.env.local"
ENV_EXAMPLE="$PROJECT_ROOT/src/client/web/.env.example"

echo -e "${BLUE}=== Full-Duplex Voice Chat - IP Update Script ===${NC}\n"

# Parse command line arguments
NEW_IP=""
if [[ "$1" == "--ip" ]] && [[ -n "$2" ]]; then
    NEW_IP="$2"
    echo -e "${YELLOW}Using provided IP: $NEW_IP${NC}"
else
    # Detect IP address
    echo -e "${BLUE}Detecting host IP address...${NC}"

    # Try different methods based on OS
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux: use hostname -I
        NEW_IP=$(hostname -I | awk '{print $1}')
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS: use ipconfig getifaddr
        NEW_IP=$(ipconfig getifaddr en0 || ipconfig getifaddr en1 || echo "")
    else
        echo -e "${RED}Unsupported OS: $OSTYPE${NC}"
        echo "Please run with --ip flag: ./scripts/update-ip.sh --ip YOUR_IP"
        exit 1
    fi

    if [[ -z "$NEW_IP" ]]; then
        echo -e "${RED}Could not detect IP address${NC}"
        echo "Please run with --ip flag: ./scripts/update-ip.sh --ip YOUR_IP"
        exit 1
    fi

    echo -e "${GREEN}Detected IP: $NEW_IP${NC}"
fi

# Validate IP format
if ! [[ "$NEW_IP" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo -e "${RED}Invalid IP address format: $NEW_IP${NC}"
    exit 1
fi

# Backup files before modification
echo -e "\n${BLUE}Creating backups...${NC}"
cp "$CADDYFILE" "$CADDYFILE.bak"
echo -e "${GREEN}✓ Backed up Caddyfile to $CADDYFILE.bak${NC}"

if [[ -f "$ENV_LOCAL" ]]; then
    cp "$ENV_LOCAL" "$ENV_LOCAL.bak"
    echo -e "${GREEN}✓ Backed up .env.local to $ENV_LOCAL.bak${NC}"
fi

# Update Caddyfile
echo -e "\n${BLUE}Updating Caddyfile...${NC}"
# Find all IP addresses in the Caddyfile and replace them
# This regex matches https://IP_ADDRESS patterns
sed -i.tmp "s|https://[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+|https://$NEW_IP|g" "$CADDYFILE"
sed -i.tmp "s|http://[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+|http://$NEW_IP|g" "$CADDYFILE"
# Update the comment with current IP
sed -i.tmp "s|# Currently configured for:.*|# Currently configured for: $NEW_IP|" "$CADDYFILE"
rm -f "$CADDYFILE.tmp"
echo -e "${GREEN}✓ Updated Caddyfile with IP: $NEW_IP${NC}"

# Create or update .env.local
echo -e "\n${BLUE}Updating web client configuration...${NC}"

if [[ ! -f "$ENV_LOCAL" ]]; then
    # Create from example
    if [[ -f "$ENV_EXAMPLE" ]]; then
        cp "$ENV_EXAMPLE" "$ENV_LOCAL"
        echo -e "${GREEN}✓ Created .env.local from .env.example${NC}"
    else
        echo -e "${YELLOW}Warning: .env.example not found, creating new .env.local${NC}"
        cat > "$ENV_LOCAL" << EOF
# Auto-generated by update-ip.sh
LIVEKIT_API_KEY=devkey
LIVEKIT_API_SECRET=devsecret1234567890abcdefghijklmn
LIVEKIT_URL=wss://$NEW_IP:7443
EOF
    fi
fi

# Update LIVEKIT_URL in .env.local
# Replace the line that starts with LIVEKIT_URL=
if grep -q "^LIVEKIT_URL=" "$ENV_LOCAL"; then
    sed -i.tmp "s|^LIVEKIT_URL=.*|LIVEKIT_URL=wss://$NEW_IP:7443|" "$ENV_LOCAL"
else
    echo "LIVEKIT_URL=wss://$NEW_IP:7443" >> "$ENV_LOCAL"
fi
rm -f "$ENV_LOCAL.tmp"

echo -e "${GREEN}✓ Updated .env.local with LiveKit URL: wss://$NEW_IP:7443${NC}"

# Display summary
echo -e "\n${GREEN}=== Configuration Updated Successfully ===${NC}\n"
echo -e "${BLUE}Host IP Address:${NC} $NEW_IP"
echo -e "${BLUE}Web Client URL:${NC}  https://$NEW_IP"
echo -e "${BLUE}LiveKit WSS URL:${NC}  wss://$NEW_IP:7443"

echo -e "\n${YELLOW}Next Steps:${NC}"
echo "1. Restart Caddy to apply changes:"
echo -e "   ${BLUE}docker compose restart caddy${NC}"
echo ""
echo "2. Restart Next.js dev server to pick up new .env.local:"
echo -e "   ${BLUE}cd src/client/web && pnpm dev${NC}"
echo ""
echo "3. Access from another device:"
echo -e "   ${BLUE}https://$NEW_IP${NC}"
echo ""
echo "4. Accept the self-signed certificate in your browser"
echo -e "   See ${BLUE}docs/HTTPS_SETUP.md${NC} for detailed instructions"

echo -e "\n${YELLOW}Firewall Configuration:${NC}"
echo "Ensure these ports are open:"
echo "  - 443/tcp  (HTTPS for web client)"
echo "  - 7443/tcp (WSS for LiveKit)"
echo ""
echo "Linux example:"
echo -e "  ${BLUE}sudo ufw allow 443/tcp${NC}"
echo -e "  ${BLUE}sudo ufw allow 7443/tcp${NC}"

echo -e "\n${GREEN}Done!${NC}"
